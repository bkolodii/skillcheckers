// Custom Theming for Angular Material
// For more information: https://material.angular.io/guide/theming
@import '~@angular/material/theming';
// Plus imports for other components in your app.

// Include the common styles for Angular Material. We include this here so that you only
// have to load a single css file for Angular Material in your app.
// Be sure that you only ever include this mixin once!
@include mat-core();

// Define the palettes for your theme using the Material Design palettes available in palette.scss
// (imported above). For each palette, you can optionally specify a default, lighter, and darker
// hue. Available color palettes: https://material.io/design/color/
$skillcheckers-primary: mat-palette($mat-indigo);
$skillcheckers-accent: mat-palette($mat-pink, A200, A100, A400);

// The warn palette is optional (defaults to red).
$skillcheckers-warn: mat-palette($mat-red);

// Create the theme object. A theme consists of configurations for individual
// theming systems such as "color" or "typography".
$skillcheckers-theme: mat-light-theme((color: (primary: $skillcheckers-primary,
      accent: $skillcheckers-accent,
      warn: $skillcheckers-warn,
    )));

// Include theme styles for core and each component used in your app.
// Alternatively, you can import and @include the theme mixins for each component
// that you are using.
@include angular-material-theme($skillcheckers-theme);


// Custom Theming for Angular Material
// For more information: https://material.angular.io/guide/theming
@import '~@angular/material/theming';
// Plus imports for other components in your app.

// Include the common styles for Angular Material. We include this here so that you only
// have to load a single css file for Angular Material in your app.
// Be sure that you only ever include this mixin once!
@include mat-core();

// Define the palettes for your theme using the Material Design palettes available in palette.scss
// (imported above). For each palette, you can optionally specify a default, lighter, and darker
// hue. Available color palettes: https://material.io/design/color/
$skillcheckers-primary: mat-palette($mat-indigo);
$skillcheckers-accent: mat-palette($mat-pink, A200, A100, A400);

// The warn palette is optional (defaults to red).
$skillcheckers-warn: mat-palette($mat-red);

// Create the theme object. A theme consists of configurations for individual
// theming systems such as "color" or "typography".
$skillcheckers-theme: mat-light-theme((color: (primary: $skillcheckers-primary,
      accent: $skillcheckers-accent,
      warn: $skillcheckers-warn,
    )));

// Include theme styles for core and each component used in your app.
// Alternatively, you can import and @include the theme mixins for each component
// that you are using.
@include angular-material-theme($skillcheckers-theme);


// Custom Theming for Angular Material
// For more information: https://material.angular.io/guide/theming
@import '~@angular/material/theming';
// Plus imports for other components in your app.

// Include the common styles for Angular Material. We include this here so that you only
// have to load a single css file for Angular Material in your app.
// Be sure that you only ever include this mixin once!
@include mat-core();

// Define the palettes for your theme using the Material Design palettes available in palette.scss
// (imported above). For each palette, you can optionally specify a default, lighter, and darker
// hue. Available color palettes: https://material.io/design/color/
$skillcheckers-primary: mat-palette($mat-indigo);
$skillcheckers-accent: mat-palette($mat-pink, A200, A100, A400);

// The warn palette is optional (defaults to red).
$skillcheckers-warn: mat-palette($mat-red);

// Create the theme object. A theme consists of configurations for individual
// theming systems such as "color" or "typography".
$skillcheckers-theme: mat-light-theme((color: (primary: $skillcheckers-primary,
      accent: $skillcheckers-accent,
      warn: $skillcheckers-warn,
    )));

// Include theme styles for core and each component used in your app.
// Alternatively, you can import and @include the theme mixins for each component
// that you are using.
@include angular-material-theme($skillcheckers-theme);


// Custom Theming for Angular Material
// For more information: https://material.angular.io/guide/theming
@import '~@angular/material/theming';
// Plus imports for other components in your app.

// Include the common styles for Angular Material. We include this here so that you only
// have to load a single css file for Angular Material in your app.
// Be sure that you only ever include this mixin once!
@include mat-core();

// Define the palettes for your theme using the Material Design palettes available in palette.scss
// (imported above). For each palette, you can optionally specify a default, lighter, and darker
// hue. Available color palettes: https://material.io/design/color/
$skillcheckers-primary: mat-palette($mat-indigo);
$skillcheckers-accent: mat-palette($mat-pink, A200, A100, A400);

// The warn palette is optional (defaults to red).
$skillcheckers-warn: mat-palette($mat-red);

// Create the theme object. A theme consists of configurations for individual
// theming systems such as "color" or "typography".
$skillcheckers-theme: mat-light-theme((color: (primary: $skillcheckers-primary,
      accent: $skillcheckers-accent,
      warn: $skillcheckers-warn,
    )));

// Include theme styles for core and each component used in your app.
// Alternatively, you can import and @include the theme mixins for each component
// that you are using.
@include angular-material-theme($skillcheckers-theme);

/* You can add global styles to this file, and also import other style files */
@import "./assets/styles/reset";
@import "./assets/styles/mixins";
@import "./assets/styles/font";

p {
  margin: 0;
}

.mat-radio-button.mat-accent.mat-radio-checked .mat-radio-outer-circle {
  border-color: #0CACF8;
}

.mat-radio-button.mat-accent .mat-radio-inner-circle {
  background-color: #0CACF8;
}

.mat-radio-button.mat-accent .mat-radio-ripple .mat-ripple-element {
  background-color: transparent;
  opacity: 0;
}

.mat-radio-button:not(.mat-radio-disabled).cdk-program-focused .mat-radio-persistent-ripple {
  opacity: 0;
}

.mat-radio-container {
  .mat-radio-outer-circle {
    width: 17px;
    height: 17px;
  }

  .mat-radio-inner-circle {
    border-radius: 50%;
    box-sizing: border-box;
    display: block;
    height: 20px;
    left: -1.4px;
    position: absolute;
    top: -1.9px;
    transition: transform ease 280ms, background-color ease 280ms;
    width: 20px;
    transform: scale(0.001);
    -webkit-print-color-adjust: exact;
    color-adjust: exact;
  }
}

.mat-radio-label-content {
  padding-left: 0%;
}



mat-form-field-underline ng-tns-c66-0 ng-star-inserted {
  height: 0%;
  display: none;
}

mat-form-field {

  width: 50%;
  height: 40px;
  font-family: "Poppins";
  font-size: 14px;
  font-weight: 500;
  outline: none;
  border: 1px solid #CBCBD9;

  mat-form-field-underline ng-tns-c66-0 ng-star-inserted {
    height: 0%;
  }
}

mat-select {
  border: none;
  width: 100%;
  height: 40px;
  font-family: "Poppins";
  font-size: 14px;
  font-weight: 500;
  outline: none;
}

mat-option {
  border: none;
}

.mat-select-trigger {

  height: 35px;
  line-height: 37px;
}

::-webkit-scrollbar {
  width: 6px;
  height: 6px;
  background: transparent;
}

/* Track */
::-webkit-scrollbar-track {
  background: transparent;

}

/* Handle */
::-webkit-scrollbar-thumb {
  background: #b7bac2;
  border-radius: 10px;

}

/* Handle on hover */
::-webkit-scrollbar-thumb:hover {
  background: #b7bac2;
}

.user-recieve-reverse {

  width: 100%;
  min-height: 48px;
  @include flexbox(row-reverse, nowrap, space-around, flex-start);
  margin-bottom: 10px;

  &__logo {
    width: 35px;
    height: 35px;
    margin-left: 5px;
  }

  &__person-data {
    width: 80%;
    min-height: 35px;
    @include flexbox(column, nowrap, flex-start, flex-start);
    margin-top: 3px;

    &--title {
      width: 100%;
      font-family: "Poppins";
      font-size: 12px;
      font-weight: 600;
      margin-bottom: 5px;
      text-align: right;
    }

    &--text {
      text-align: right;
      width: 100%;
      font-family: "Poppins";
      font-size: 10px;
      font-weight: 500;
      color: #434955;
      line-height: 18px;
    }

  }

  &__other-data {
    width: 45px;
    height: 40px;
    margin-top: 5px;
    @include flexbox(column, nowrap, flex-start, flex-end);

    &--time {
      font-family: "Poppins";
      font-size: 10px;
      font-weight: 500;
      color: #b3b3b6;
      margin-bottom: 5px;

    }
  }
}
.ql-editor {
  min-height: 100px;
}

body {
  overflow: hidden;
}

html,
body {
  height: 100%;
}

body {
  margin: 0;
  font-family: "Poppins";
}
