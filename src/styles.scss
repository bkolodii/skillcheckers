// Custom Theming for Angular Material
// For more information: https://material.angular.io/guide/theming
@import '~@angular/material/theming';
@import "./assets/styles/reset";
@import "./assets/styles/mixins";
@import "./assets/styles/font";
// Plus imports for other components in your app.

// Include the common styles for Angular Material. We include this here so that you only
// have to load a single css file for Angular Material in your app.
// Be sure that you only ever include this mixin once!
@include mat-core();
// Define the palettes for your theme using the Material Design palettes available in palette.scss
// (imported above). For each palette, you can optionally specify a default, lighter, and darker
// hue. Available color palettes: https://material.io/design/color/
$skillcheckers-primary: mat-palette($mat-indigo);
$skillcheckers-accent: mat-palette($mat-blue, A700);

// The warn palette is optional (defaults to red).
$skillcheckers-warn: mat-palette($mat-red);

// Create the theme object. A theme consists of configurations for individual
// theming systems such as "color" or "typography".
$skillcheckers-theme: mat-light-theme((color: (primary: $skillcheckers-primary,
      accent: $skillcheckers-accent,
      warn: $skillcheckers-warn,
    )));

// Include theme styles for core and each component used in your app.
// Alternatively, you can import and @include the theme mixins for each component
// that you are using.
@include angular-material-theme($skillcheckers-theme);


// Custom Theming for Angular Material
// For more information: https://material.angular.io/guide/theming
@import '~@angular/material/theming';
// Plus imports for other components in your app.

// Include the common styles for Angular Material. We include this here so that you only
// have to load a single css file for Angular Material in your app.
// Be sure that you only ever include this mixin once!
@include mat-core();

// Define the palettes for your theme using the Material Design palettes available in palette.scss
// (imported above). For each palette, you can optionally specify a default, lighter, and darker
// hue. Available color palettes: https://material.io/design/color/
$skillcheckers-primary: mat-palette($mat-indigo);
$skillcheckers-accent: mat-palette($mat-blue, A700);

// The warn palette is optional (defaults to red).
$skillcheckers-warn: mat-palette($mat-red);

// Create the theme object. A theme consists of configurations for individual
// theming systems such as "color" or "typography".
$skillcheckers-theme: mat-light-theme((color: (primary: $skillcheckers-primary,
      accent: $skillcheckers-accent,
      warn: $skillcheckers-warn,
    )));

// Include theme styles for core and each component used in your app.
// Alternatively, you can import and @include the theme mixins for each component
// that you are using.
@include angular-material-theme($skillcheckers-theme);


// Custom Theming for Angular Material
// For more information: https://material.angular.io/guide/theming
@import '~@angular/material/theming';
// Plus imports for other components in your app.

// Include the common styles for Angular Material. We include this here so that you only
// have to load a single css file for Angular Material in your app.
// Be sure that you only ever include this mixin once!
@include mat-core();

// Define the palettes for your theme using the Material Design palettes available in palette.scss
// (imported above). For each palette, you can optionally specify a default, lighter, and darker
// hue. Available color palettes: https://material.io/design/color/
$skillcheckers-primary: mat-palette($mat-indigo);
$skillcheckers-accent: mat-palette($mat-blue, A700);

// The warn palette is optional (defaults to red).
$skillcheckers-warn: mat-palette($mat-red);

// Create the theme object. A theme consists of configurations for individual
// theming systems such as "color" or "typography".
$skillcheckers-theme: mat-light-theme((color: (primary: $skillcheckers-primary,
      accent: $skillcheckers-accent,
      warn: $skillcheckers-warn,
    )));

// Include theme styles for core and each component used in your app.
// Alternatively, you can import and @include the theme mixins for each component
// that you are using.
@include angular-material-theme($skillcheckers-theme);


// Custom Theming for Angular Material
// For more information: https://material.angular.io/guide/theming
@import '~@angular/material/theming';
// Plus imports for other components in your app.

// Include the common styles for Angular Material. We include this here so that you only
// have to load a single css file for Angular Material in your app.
// Be sure that you only ever include this mixin once!
@include mat-core();

// Define the palettes for your theme using the Material Design palettes available in palette.scss
// (imported above). For each palette, you can optionally specify a default, lighter, and darker
// hue. Available color palettes: https://material.io/design/color/
$skillcheckers-primary: mat-palette($mat-indigo);
$skillcheckers-accent: mat-palette($mat-blue, A700);

// The warn palette is optional (defaults to red).
$skillcheckers-warn: mat-palette($mat-red);

// Create the theme object. A theme consists of configurations for individual
// theming systems such as "color" or "typography".
$skillcheckers-theme: mat-light-theme((color: (primary: $skillcheckers-primary,
      accent: $skillcheckers-accent,
      warn: $skillcheckers-warn,
    )));

// Include theme styles for core and each component used in your app.
// Alternatively, you can import and @include the theme mixins for each component
// that you are using.
@include angular-material-theme($skillcheckers-theme);

/* You can add global styles to this file, and also import other style files */


p {
  margin: 0;
}

:host ::ng-deep .mat-radio-container {
  height: 10px;
  width: 10px;
}

:host ::ng-deep .mat-radio-outer-circle {
  height: 10px;
  width: 10px;
}

:host ::ng-deep .mat-radio-inner-circle {
  height: 10px;
  width: 10px;
}

:host ::ng-deep .mat-radio-button .mat-radio-ripple {
  height: 15px;
  /*double of your required circle radius*/
  width: 15px;
  /*double of your required circle radius*/
  left: calc(50% - 7.5px);
  /*'10px'-same as your required circle radius*/
  top: calc(50% - 7.5px);
  /*'10px'-same as your required circle radius*/
  background-color: #0CACF8;
}


mat-form-field-underline ng-tns-c66-0 ng-star-inserted {
  height: 0%;
  display: none;
}

mat-form-field {

  width: 50%;
  height: 40px;
  font-family: "Poppins";
  font-size: 14px;
  font-weight: 500;
  outline: none;
  border: 1px solid #CBCBD9;

  mat-form-field-underline ng-tns-c66-0 ng-star-inserted {
    height: 0%;
  }
}

mat-select {
  border: none;
  width: 100%;
  height: 40px;
  font-family: "Poppins";
  font-size: 14px;
  font-weight: 500;
  outline: none;
}

mat-option {
  border: none;
}

.mat-select-trigger {

  height: 35px;
  line-height: 37px;
}

::-webkit-scrollbar {
  width: 6px;
  height: 6px;
  background: transparent;
}

/* Track */
::-webkit-scrollbar-track {
  background: transparent;

}

/* Handle */
::-webkit-scrollbar-thumb {
  background: #b7bac2;
  border-radius: 10px;

}

/* Handle on hover */
::-webkit-scrollbar-thumb:hover {
  background: #b7bac2;
}

.user-recieve-reverse {

  width: 100%;
  min-height: 48px;
  @include flexbox(row-reverse, nowrap, space-around, flex-start);
  margin-bottom: 10px;

  &__logo {
    width: 35px;
    height: 35px;
    margin-left: 5px;
  }

  &__person-data {
    width: 80%;
    min-height: 35px;
    @include flexbox(column, nowrap, flex-start, flex-start);
    margin-top: 3px;

    &--title {
      width: 100%;
      font-family: "Poppins";
      font-size: 12px;
      font-weight: 600;
      margin-bottom: 5px;
      text-align: right;
    }

    &--text {
      text-align: right;
      width: 100%;
      font-family: "Poppins";
      font-size: 10.5px;
      font-weight: 500;
      color: #434955;
      line-height: 18px;
    }

  }

  &__other-data {
    width: 45px;
    height: 40px;
    margin-top: 5px;
    @include flexbox(column, nowrap, flex-start, flex-end);

    &--time {
      font-family: "Poppins";
      font-size: 10px;
      font-weight: 500;
      color: #b3b3b6;
      margin-bottom: 5px;

    }
  }
}

.ql-editor {
  min-height: 100px;
}

body {
  overflow: hidden;
}

html,
body {
  font-family: "Poppins";
  height: 100vh;
}

body {
  margin: 0;
  font-family: "Poppins";
}

* {
  font-family: "Poppins";
}

.flex {
  display: flex;
}

.col {
  flex-flow: column;
}

.row-rev {
  flex-flow: row-reverse;
}

.nowrap {
  flex-wrap: nowrap;
}

.wrap {
  flex-wrap: wrap;
}

.bc-green {
  background-color: #25BF50 !important;
}

.btn {
  font-family: "Poppins";
  font-size: 13px;
  font-weight: 500;
  color: white;
  padding: 10px 15px 10px 15px;
  border: 1px solid transparent;
  outline: none;
  box-sizing: border-box;

}

.btn-icon-left {
  padding-right: 7px;
}

.btn-icon-right {
  padding-left: 7px;
}


.not-read {
  min-width: 20px;
  min-height: 20px;
  font-family: "Poppins";
  font-weight: 500;
  font-style: normal;
  margin-left: 10px;
  font-size: 11px;
  line-height: 11px;
  border-radius: 50%;
  color: white;
}

.w-100 {
  width: 100%;
}

$aligh-selfs: (c: center,
  fs: flex-start,
  fe: flex-end,
);
$colors: (gray: #EEF0F8,
  blue: #0CACF8,
  light-blue:#F0F8FF,
  black: #292f3d,
  white: white,
  dark-gray: #D2D4DE,
  light-gray: #CBCBD9,
  red: #FD6363,
  initial: #6E7585);


$flex-justs: (sb: space-between,
  sa: space-around,
  c: center,
  fs: flex-start,
  fe: flex-end,
);
$fonts: (9: 9px,
  10: 10px,
  11: 11px,
  12: 12px,
  13: 13px,
  14: 14px,
  15: 15px,
  16: 16px,
  17: 17px,
);
$flex-alighs: (c: center,
  fs: flex-start,
  fe: flex-end,
);

@each $fontSize,
$font in $fonts {
  .font-#{$fontSize} {
    font-family: "Poppins";
    font-weight: 500;
    font-style: normal;
    font-size: $font;
  }
}

  @each $alighsname,
  $aligh-self in $aligh-selfs {
    .aligh-self-#{$alighsname} {
      align-self: $aligh-self;
    }
  }

  @each $flexjname,
  $flex-just in $flex-justs {
    .jc#{$flexjname} {
      justify-content: $flex-just;
    }
  }

  @each $flexaname,
  $flex-aligh in $flex-alighs {
    .ai#{$flexaname} {
      align-items: $flex-aligh;
    }
  }

  @each $colorname,
  $color in $colors {
    .bc-#{$colorname} {
      background-color: $color;
    }

    .bdc-#{$colorname} {
      border: 1px solid $color;
    }

    .txt-c-#{$colorname} {
      color: $color;
    }
  }
